// ListMap Exercises

type ListMap <A: Type> { 
  empty
  cons(head: Pair<Nat, A>, tail: ListMap<A>)
}

// Inserts a value

set<A: Type>(key: Nat, value: A, lm: ListMap<A>): ListMap<A>
  case lm {
    empty: ListMap.cons<A>(Pair.new<Nat, A>(key, value), ListMap.empty<A>)
    cons: case Nat.eql(key, lm.head@fst) {
      true: ListMap.cons<A>(Pair.new<Nat, A>(key, value), lm.tail)
      false: ListMap.cons<A>(lm.head, set<A>(key, value, lm.tail))
    }
  }



// Returns a Value from a Key (if there is one)

get<A: Type>(key: Nat, lm: ListMap<A>): Maybe<A>
  case lm {
     empty: Maybe.none<A>
     cons: case key {
         zero: case lm.head {
             new:  Maybe.some<A>(lm.head.snd)
         }
         succ: case lm.head {
             new: case Nat.eql(key, lm.head.fst) {
                 true: Maybe.some<A>(lm.head.snd)
                 false: get<A>(key, lm.tail)
             }
         }
     }
 }



// Applies a function to a Value from a Key

mut<A: Type>(key: Nat, fn: A -> A, lm: ListMap<A>): ListMap<A>
  case lm {
    empty: ListMap.empty<A>
    cons: case Nat.eql(key, lm.head@fst) {
      true: ListMap.cons<A>(Pair.new<Nat, A>(lm.head@fst, fn(lm.head@snd)), lm.tail)
      false: ListMap.cons<A>(lm.head, mut<A>(key, fn, lm.tail))
    }
  }



// Converts the ListMap to a String

show<A: Type>(fn: A -> String, lm: ListMap<A>): String
  ?show



// Checks if the ListMap has a key

has<A:Type>(key: Nat, lm: ListMap<A>): Bool
  case lm {
    empty: Bool.false 
    cons: case Nat.eql(key, lm.head@fst) {
      true: Bool.true
      false: has<A>(key, lm.tail)
    }
  }



// Removes all Elements that doesn't satisfy a condition

filter<A: Type>(cond: A -> Bool, lm: ListMap<A>): ListMap<A>
  case lm {
    empty: ListMap.empty<A>
    cons: 
      let conds = cond(lm.head@snd)
      case conds {
        true: ListMap.cons<A>(lm.head, filter<A>(cond, lm.tail))
        false: filter<A>(cond, lm.tail)
      }
  }



// Applies a function to all Values

map<A: Type>(fn: A -> A, lm: ListMap<A>): ListMap<A>
  case lm {
    empty: ListMap.empty<A>
    cons: ListMap.cons<A>(Pair.new<Nat, A>(lm.head@fst, fn(lm.head@snd)), map<A>(fn, lm.tail))
  }



// Runs x gets and y sets

stress_test(sets: Nat, gets: Nat): String
  let map = ListMap.empty!
  for i from 0 to sets with map:
    set<Nat>(i, 50, map)
  let text = "test"
  for i from 0 to gets with text:
    let get = get<Nat>(i, map)
    text
  text

ex_11: _
  // stress_test(10000, 10000)
  "test"


