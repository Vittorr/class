//Char and String

// Charactere Type
// Alias for U16
Char: Type
  U16


//Syntax Sugar for U16
  //0#16, 1#16, 2#16 ...


//Syntax Sugar for Char
  //'0', '1', '2' ... 

//Ascii Table from Wikipedia:
// https://upload.wikimedia.org/wikipedia/commons/1/1b/ASCII-Table-wide.svg

//  _________________________________________
// | U16 Syntax Sugar   | Char Syntax Sugar  |  
// |--------------------|--------------------|
// |     72#16          |      'H'           |
// |    101#16          |      'e'           |
// |    121#16          |      'y'           |
//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

//Verifies if the character is Upper Case

//is_upper('a') -> Bool.false
//is_upper('A') -> Bool.true
//is_upper('0') -> Bool.false

is_upper(x: Char): Bool
  let greater = U16.gte(x, 'A') 
  case greater {
    true: 
      let lower = U16.lte(x, 'Z') 
      case lower {
        true: Bool.true
        false: Bool.false 
      }
    false: Bool.false
  }



//Verifies if the character is Lower Case

//is_lower('a') -> Bool.true
//is_lower('A') -> Bool.false
//is_lower('0') -> Bool.false

is_lower(x: Char): Bool
  let greater = U16.gte(x, 'a') 
  case greater {
    true: 
      let lower = U16.lte(x, 'z') 
      case lower {
        true: Bool.true
        false: Bool.false 
      }
    false: Bool.false
  }



//Verifies if the character is a Number-Digit Value

//is_digit('a') -> Bool.false
//is_digit('A') -> Bool.false
//is_digit('0') -> Bool.true

is_digit(x: Char): Bool
  let greater = U16.gte(x, '0') 
  case greater {
    true: 
      let lower = U16.lte(x, '9') 
      case lower {
        true: Bool.true
        false: Bool.false 
      }
    false: Bool.false
  }



//Verifies if both of the Characters are the same

//is_equal('a', 'A') -> Bool.false
//is_equal('A', '0') -> Bool.false
//is_equal('0', '0') -> Bool.true

equal(x: Char, y: Char): Bool
  let same = U16.eql(x, y)

  same



//Transforms Characters into Nat digits

//to_digit('0') -> Nat.zero
//to_digit('1') -> Nat.succ(Nat.zero)
//to_digit('4') -> 4

to_digit(x: Char): Nat
  let cond = is_digit(x)
  case cond {
    true: 
      let numb = U16.to_nat(x)
      case numb {
        zero: Nat.zero
        succ: case Nat.gtn(numb, 48) {
          true: case Nat.lte(numb, 57) {
            true: 
              let calc = Nat.sub(numb, 48)
              case calc {
                zero: Nat.zero // o verdadeiro zero
                succ: 
                  let change = Nat.to_u16(numb.pred)
                  Nat.succ(to_digit(change))
              }
            false: Nat.zero
          }
          false: Nat.zero
        }
      }
    false: Nat.zero
  }


//Transforms all Characters into Lower Case Characters

//to_lower('A') -> 'a'
//to_lower('B') -> 'b'
//to_lower('Z') -> 'z'

to_lower(x: Char): Char
  let cond = is_upper(x)
  case cond {
    true: U16.add(x, 32)
    false: x
  }


//Transforms all Characters into Upper Case Characters

//to_upper('a') -> 'A' 
//to_upper('b') -> 'B'
//to_upper('z') -> 'Z'

to_upper(x: Char): Char
  let cond = is_lower(x)
  case cond {
    true: U16.sub(x, 32)
    false: x
  }




//String Type
type String { 
  nil,
  cons(head: Char, tail: String)
}

//Without Syntax Sugar for String
//a = String.cons('H', String.cons('I', String.nil))
//b = String.cons('H', String.cons('e', String.cons('l', String.cons('l', String.cons('o', String.nil)))))
//c = String.cons('t', String.cons('e', String.cons('x', String.cons('t', String.nil))))

//Syntax Sugar for String
//a = "HI"
//b = "Hello"
//c = "text"



//Concatenates two Strings into one

//concat(a,b) -> "HiHello"
//concat(b,c) -> "Hellotext"

concat(xs: String, ys: String): String
  case xs {
    nil: case ys {
      nil: String.nil
      cons: ys
    }
    cons: case ys {
      nil: xs
      cons: String.cons(xs.head, concat(xs.tail, ys))
    }
  }


//Applies a Function to all Characters of the String

//map(to_lower, a) -> "hi"

map(fn: Char -> Char, xs: String): String
  case xs {
    nil: String.nil
    cons: String.cons(fn(xs.head), map(fn, xs.tail))
  }


//Converts all Lower Case Caracters in a String to Upper Case

//string_to_upper(c) -> "TEXT"

string_to_upper(xs: String): String
  case xs {
    nil: String.nil
    cons: map(to_upper, xs)
  }

string_to_upper1(xs: String): String
  case xs {
    nil: String.nil
    cons: String.cons(to_upper(xs.head), string_to_upper1(xs.tail))
  }


//Convers the String into bits

//to_bits(a) -> "0000000001001001 0000000001001000"
//to_bits(b) -> "0000000001101111 0000000001101100 00000000011011000 000000001100101 0000000001001000"
//to_bits(c) -> "0000000001110100 0000000001111000 00000000011001010 000000001110100"

to_bits(xs: String): Bits
  case xs {
    nil: Bits.e
    cons: 
      let bits = U16.to_bits(xs.head)
      Bits.concat(bits, to_bits(xs.tail))
  }



//Verifies if two Strings are Equal

//stringequal(a, a) -> Bool.true
//stringequal(a, b) -> Bool.false
//stringequal(b, c) -> Bool.false

stringequal(xs: String, ys: String): Bool
  case xs {
    nil: case ys { 
      nil: Bool.true
      cons: Bool.false
    }
    cons: case ys {
      nil: Bool.false
      cons: case equal(xs.head, ys.head) {
        true: stringequal(xs.tail, ys.tail)
        false: Bool.false
      }
    }
  }


//Verifies if All String elements are Numbers

//is_nat(a)      -> Bool.false
//is_nat(b)      -> Bool.false
//is_nat("1234") -> Bool.true

is_nat(xs: String): Bool
  case xs {
    nil: Bool.true
    cons: case is_digit(xs.head) {
      true: is_nat(xs.tail)
      false: Bool.false
    }
  }



// Divides the elements of a String into a list, using a match you decide

//split(b, "l") -> ["He","" , "o"
//split(c, "e") -> ["t", "xt"]

split(xs: String, match: String): List<String>
  ?split



// Takes any elements while the condition is matched.

//take_while(is_upper,    a) -> "HI"
//take_while(is_lower,    b) -> ""
//take_while(is_equal('t'), c) -> "t"

take_while(cond: Char -> Bool, xs: String): String
  case xs {
    nil: String.nil
    cons: 
      let conds = cond(xs.head)
      case conds {
        true: String.cons(xs.head, take_while(cond, xs.tail))
        false: String.nil
      }
  }


//Finds the index of the head for the first occurence if any of the Characters are equal

//find(a, "H") -> 0
//find(b, "l") -> 2
//find(c, "x") -> 2

find(xs: String, x: Char): Nat
  case xs {
    nil: Nat.zero
    cons: case equal(xs.head, x) {
      true: Nat.zero
      false: Nat.succ(find(xs.tail, x))
    }
  }


//Filters the String and discards all the Chars that doesn't satisfy given condition 

//filter(is_upper,      a) -> "HI"
//filter(is_lower,      b) -> "ello"
//filter(is_equal('t'), c) -> "tt"

filter(cond: Char -> Bool, xs: String): String
  case xs {
    nil: String.nil
    cons: 
      let conds = cond(xs.head)
      case conds {
        true: String.cons(xs.head, filter(cond, xs.tail))
        false: filter(cond, xs.tail)
      }
  }


//Concatenates all elements of a List of Strings

//flatten([a,b,c]) -> "HIHellotext"

flatten_extra(lxs: List<String>): String
  case lxs {
    nil: String.nil
    cons: String.concat(lxs.head, flatten_extra(lxs.tail))
  }

// tomar cuidado pra nao botar head na frente do acum pra nao sair invertido

flatten(lxs: List<String>): String
  flatten_aux(lxs, String.nil)

flatten_aux(lxs1: List<String>, acum: String): String
  case lxs1 {
    nil: acum
    cons: flatten_aux(lxs1.tail, concat(acum, lxs1.head))
  }


//Drops a n Number of characteres from a String

//drop(1, a) -> "I"
//drop(2, b) -> "llo"
//drop(3, c) -> "t"

drop(n: Nat, xs: String): String
  case n {
    zero: xs
    succ: case xs {
      nil: String.nil
      cons: drop(n.pred, xs.tail)
    }
  }



//Takes n elements of a String

//take(1, a) ->  "H"
//take(2, b) ->  "He"
//take(3, c) ->  "tex"

take(n: Nat xs: String): String
  case n {
    zero: String.nil
    succ: case xs {
      nil: String.nil
      cons: String.cons(xs.head, take(n.pred, xs.tail))
    }
  }


//Takes a x part of the string after a n Index of values get dropped

//slice(1, 2, a) -> "I"
//slice(2, 4, b) -> "ll"
//slice(1, 3, c) -> "ex"

slice(n: Nat, x: Nat, xs: String): String
  case n {
    zero: case x {
      zero: take(0, drop(0, xs))
      succ: take(x, drop(0, xs)) 
    }
    succ: case x {
      zero: take(0, drop(n, xs))
      succ: take(Nat.sub(x, n), drop(n, xs))
    }
  }


