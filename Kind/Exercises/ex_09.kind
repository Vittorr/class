// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]

zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs {
    nil: List.nil<Pair<A, B>>
    cons: case ys {
      nil: List.nil<Pair<A, B>>
      cons: List.cons<Pair<A, B>>(Pair.new<A,B>(xs.head, ys.head), zip<A,B>(xs.tail, ys.tail))
    }
  }


// Returns the smallest element of a List

smallest(xs: List<Nat>): Nat
  case xs {
    nil: Nat.zero
    cons: case xs.tail {
      nil: xs.head
      cons: 
        let resul = Nat.min(xs.head, smallest(xs.tail))
        resul
    }
  }

// []
// [1] 
// [1, 2]
// [1, 2, 3]



// Returns the same list without the smallest element

delete_smallest(xs: List<Nat>): List<Nat>
  case xs {
    nil: List.nil<Nat>
    cons: 
      let compare = Nat.eql(smallest(xs), xs.head)
      case compare {
        true: xs.tail
        false: List.cons<Nat>(xs.head, delete_smallest(xs.tail))
      }
  }


// [3, 2, 4]
// [3, 4]


// Returns the same list, in ascending order

sort_ascending(xs: List<Nat>): List<Nat>
  case xs {
    nil: List.nil<Nat>
    cons: case xs.tail {
      nil: List.cons<Nat>(xs.head, List.nil<Nat>)
      cons: List.cons<Nat>(smallest(xs), sort_ascending(delete_smallest(xs)))
    }
  }

// []
// [1] 
// [1, 2]
// [1, 2, 3]


// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!

get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
  case xs {
    nil: Maybe.none<A>
    cons: case idx {
      zero: Maybe.some<A>(xs.head)
      succ: get<A>(idx.pred, xs.tail)
    }
  }

// [1, 2, 3, 4, 5]


// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]

filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
  case xs {
    nil: List.nil<A>
    cons: 
      let try = f(xs.head)
      case try {
        true: List.cons<A>(xs.head, filter<A>(f, xs.tail))
        false: filter<A>(f, xs.tail)
      }
  }
  

