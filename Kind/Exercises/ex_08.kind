// Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the head of the List

head<A: Type>(xs: List<A>): Maybe<A>
  case xs {
    nil: Maybe.none<A>
    cons: Maybe.some<A>(xs.head)
  }


// Returns the list without the first element

tail<A: Type>(xs: List<A>): List<A>
  case xs {
    nil: List.nil<A>
    cons: xs.tail
  }


// Returns the length of a list

length<A: Type>(xs: List<A>): Nat
  case xs {
    nil: Nat.zero
    cons: Nat.succ(length<A>(xs.tail))
  }


// Returns the last element of a list

last<A: Type>(xs: List<A>): Maybe<A>
  case xs {
    nil: Maybe.none<A>
    cons: case xs.tail {
      nil: Maybe.some<A>(xs.head)
      cons: last<A>(xs.tail)
    }
  }

// [1, 2, 3, 4, 5, 6]
// [2, 3, 4, 5, 6]
// [3, 4, 5, 6]
// [4, 5, 6]
// [5, 6]
// [6]


// Returns the list without the last element

init<A: Type>(xs: List<A>): List<A>
  case xs {
    nil: List.nil<A>
    cons: case xs.tail {
      nil: List.nil<A>
      cons: List.cons<A>(xs.head, init<A>(xs.tail))
    }
  }


// [2, 3, 4]
// [2] + [3, 4]

// [2, 3] + [4]

// -----> [2, 3]


// Concatenates two lists

concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs {
    nil: case ys {
      nil: List.nil<A>
      cons: ys
    }
    cons: case ys {
      nil: xs
      cons: List.cons<A>(xs.head, concat<A>(xs.tail, ys))
    }
  }


// [1, 2, 3] + [5, 6]

// [1] + [2, 3, 5, 6]


// Removes n elements from the start of the list
// List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]

drop<A: Type>(n: Nat, xs: List<A>): List<A>
  case n {
    zero: xs
    succ: case xs {
      nil: List.nil<A>
      cons: drop<A>(n.pred, xs.tail)
    }
  }


// Creates a new list with the N first elements of the previous list
// List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3]

take<A: Type>(n: Nat, xs: List<A>): List<A>
  case n {
    zero: List.nil<A>
    succ: case xs {
      nil: List.nil<A>
      cons: List.cons<A>(xs.head, take<A>(n.pred, xs.tail))
    }
  }


// Applies a function to all elements of a list

map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
    nil: List.nil<B>
    cons: List.cons<B>(fn(xs.head), map<A, B>(fn, xs.tail))
  }


// Returns the same list, with the order reversed

reverse<A: Type>(xs: List<A>): List<A>
  reverse_go<A>(List.nil<A>, xs)

reverse_go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
    nil: case new_list {
      nil: List.nil<A>
      cons: new_list
    }
    cons: reverse_go<A>(List.cons<A>(old_list.head, new_list), old_list.tail)
  }

// [], [1, 2, 3]

// [1] ,,, [2, 3]
// [2] + [1] ,,, [3]

// [3] + [2, 1] ,,, []

// ------> [3, 2, 1]


