type Cofre {
  new(senha: Bits)
}

// Vai ser convertida em um número de 3 dígitos
// Senha de exemplo: 1000 1110 1001  1 7 9
// convertida em um número, 4 bits = 1 digito do número

take(n: Nat, bs: Bits): Bits
  case n {
    zero: Bits.e
    succ: case bs {
      e: Bits.e
      o: Bits.o(take(n.pred, bs.pred))
      i: Bits.i(take(n.pred, bs.pred))
    }
  }

drop(n: Nat, bs: Bits): Bits
  case n {
    zero: bs
    succ: case bs {
      e: Bits.e
      o: drop(n.pred, bs.pred)
      i: drop(n.pred, bs.pred)
    }
  }

dbl(a: Nat): Nat // double
  case a {
    zero: Nat.zero
    succ: Nat.succ(Nat.succ(dbl(a.pred)))
  }

to_nat(b: Bits): Nat
  case b {
    e: Nat.zero
    o: dbl(to_nat(b.pred))
    i: Nat.succ(dbl(to_nat(b.pred)))
  }

add(a: Nat, b: Nat): Nat
  case a { 
    zero: case b { 
      zero: Nat.zero
      succ: b
    }
    succ: case b {
      zero: a
      succ: Nat.succ(Nat.succ(add(a.pred, b.pred)))
    }
  }

mul(a: Nat, b: Nat): Nat
  case a {
    zero: case b {
      zero: Nat.zero
      succ: Nat.zero
    }
    succ: case b {
      zero: Nat.zero
      succ: add(a, mul(a, b.pred))
    }
  }

find_password11(pair: Pair): Nat
    let senha = pair@fst
    let senha1 = pair@snd
    
           //1000 1110 1001 -> 179
find_password(cofre: Cofre): Nat
    let senha = cofre@senha
    
    let first = take(4, senha)
    let second = drop(4, take(8, senha))
    let third = drop(8, senha)
    
    let n1 = to_nat(first)
    let n2 = to_nat(second)
    let n3 = to_nat(third)
    
    let nn1 = mul(100, n1)
    let nn2 = mul(10, n2)
    let nn3 = mul(1, n3)

    let sum1 = add(nn1, nn2)
    let result = add(sum1, nn3)

    result


// 1000 + 1110 + 1001 

//   1     7     9 = 179 ------------> 100x1 + 10x7 + 9x1


test0:_
  let cofre_a = Cofre.new(Bits.read("100011101001")) // 1 7 9
  let cofre_b = Cofre.new(Bits.read("001010001100")) // 4 1 3
  let cofre_c = Cofre.new(Bits.read("011000001110")) // 6 0 7
  find_password(cofre_c)

